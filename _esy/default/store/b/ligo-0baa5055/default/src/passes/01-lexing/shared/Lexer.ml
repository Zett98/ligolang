# 3 "src/passes/01-lexing/shared/Lexer.mll"
 
(* START HEADER *)

[@@@warning "-42"]

(* OCaml Stdlib *)

module Array = Caml.Array (* Used in the generated code only *)
module Int64 = Caml.Int64

(* VENDOR DEPENDENCIES *)

module Region = Simple_utils.Region

(* The functorised interface *)

module type S = LexerLib.API.LEXER

module Make (Token : Token.S) =
  struct
    type token = Token.t
    module Core = LexerLib.Core

    (* ERRORS *)

    type error =
      Unexpected_character of char
    | Non_canonical_zero
    | Invalid_symbol of string
    | Wrong_nat_syntax of string
    | Wrong_mutez_syntax of string
    | Wrong_lang_syntax of string
    | Unterminated_verbatim of string
    | Invalid_linemarker_argument
    | Overflow_mutez
    | Underflow_mutez

    let sprintf = Printf.sprintf

    let error_to_string = function
      Unexpected_character c ->
        sprintf "Unexpected character '%s'." (Char.escaped c)
    | Non_canonical_zero ->
        "Non-canonical zero.\n\
         Hint: Use 0."
    | Invalid_symbol s ->
        sprintf "Invalid symbol: %S.\n\
                 Hint: Check the LIGO syntax you use." s
    | Wrong_nat_syntax hint ->
        sprintf "Wrong nat syntax.\n%s" hint
    | Wrong_mutez_syntax hint ->
        sprintf "Wrong mutez syntax.\n%s" hint
    | Wrong_lang_syntax hint ->
        sprintf "Wrong code injection syntax.\n%s" hint
    | Unterminated_verbatim term ->
        sprintf "Unterminated verbatim.\n\
                 Hint: Close with %S." term
    | Invalid_linemarker_argument ->
        "Unexpected or invalid linemarker argument.\n\
         Hint: The optional argument is either 1 or 2."
    | Overflow_mutez ->
        "Mutez amount too large.\n\
         Note: From 0 to 2^63-1=9_223_372_036_854_775_807."
    | Underflow_mutez ->
        "Mutez amount not an integer."

    type message = string Region.reg

    exception Error of message

    let fail region error =
      let msg = error_to_string error in
      raise (Error Region.{value=msg;region})

    let support_string_delimiter = Token.support_string_delimiter

    (* TOKENS *)

    (* Strings *)

    let mk_string (thread, state) =
      let start  = thread#opening#start in
      let stop   = state#pos in
      let region = Region.make ~start ~stop in
      let lexeme = thread#to_string in
      let token  = Token.mk_string lexeme region
      in Core.Token token, state

    (* Verbatim strings *)

    let mk_verbatim (thread, state) =
      let start  = thread#opening#start in
      let stop   = state#pos in
      let region = Region.make ~start ~stop in
      let lexeme = thread#to_string in
      let token  = Token.mk_verbatim lexeme region
      in Core.Token token, state

    (* Bytes *)

    let mk_bytes bytes state buffer =
      let Core.{region; state; _} = state#sync buffer in
      let norm  = Str.(global_replace (regexp "_") "" bytes) in
      let token = Token.mk_bytes bytes norm region
      in Core.Token token, state

    (* Integers *)

    let mk_int state buffer =
      let Core.{region; lexeme; state} = state#sync buffer in
      let z = Z.of_string lexeme in
      if   Z.equal z Z.zero && String.(lexeme <> "0")
      then fail region Non_canonical_zero
      else let token = Token.mk_int lexeme z region
           in Core.Token token, state

    (* Natural numbers *)

    let mk_nat nat state buffer =
      let Core.{region; state; _} = state#sync buffer
      and z = Z.of_string nat in
      if   Z.equal z Z.zero && String.(nat <> "0")
      then fail region Non_canonical_zero
      else match Token.mk_nat nat z region with
             Ok token -> Core.Token token, state
           | Error Token.Wrong_nat_syntax hint ->
               fail region (Wrong_nat_syntax hint)

    (* Mutez *)

    let mk_mutez nat state buffer =
      let Core.{region; state; _} = state#sync buffer in
      match Int64.of_string_opt nat with
        None -> fail region Overflow_mutez
      | Some mutez_64 ->
          if   Int64.equal mutez_64 Int64.zero && String.(nat <> "0")
          then fail region Non_canonical_zero
          else let suffix = "mutez" in
               match Token.mk_mutez nat ~suffix mutez_64 region with
                 Ok token -> Core.Token token, state
               | Error Token.Wrong_mutez_syntax hint ->
                   fail region (Wrong_mutez_syntax hint)

    (* Integral Tez (internally converted to mutez) *)

    let mk_tez nat suffix state buffer =
      let Core.{region; state; _} = state#sync buffer
      and mutez = Z.mul (Z.of_int 1_000_000) (Z.of_string nat) in
      try
        let mutez_64 = Z.to_int64 mutez in
        if   Int64.equal mutez_64 Int64.zero && String.(nat <> "0")
        then fail region Non_canonical_zero
        else match Token.mk_mutez nat ~suffix mutez_64 region with
               Ok token -> Core.Token token, state
             | Error Token.Wrong_mutez_syntax hint ->
                 fail region (Wrong_mutez_syntax hint)
      with Z.Overflow -> fail region Overflow_mutez

    (* Tez as a decimal number (internally converted to mutez) *)

    let mk_tez_dec integral fractional suffix state buffer =
      let Core.{region; state; _} = state#sync buffer in
      let integral'   = Str.(global_replace (regexp "_") "" integral)
      and fractional' = Str.(global_replace (regexp "_") "" fractional) in
      let numerator   = Z.of_string (integral' ^ fractional')
      and frac_length = String.length fractional' in
      let denominator = Z.of_string ("1" ^ String.make frac_length '0')
      and million     = Q.of_string "1_000_000" in
      let q_mutez     = Q.make numerator denominator |> Q.mul million in
      if Z.equal (Q.den q_mutez) Z.one then
        try
          let mutez_64 = Z.to_int64 (Q.num q_mutez) in
          if   Int64.equal mutez_64 Int64.zero
               && String.(integral <> "0" || fractional <> "0")
          then fail region Non_canonical_zero
          else let lexeme = integral ^ "." ^ fractional in
               match Token.mk_mutez lexeme ~suffix mutez_64 region with
                 Ok token -> Core.Token token, state
               | Error Token.Wrong_mutez_syntax hint ->
                   fail region (Wrong_mutez_syntax hint)
        with Z.Overflow -> fail region Overflow_mutez
      else fail region Underflow_mutez

    (* Identifiers *)

    let mk_ident state buffer =
      let Core.{region; lexeme; state} = state#sync buffer
      in Core.Token (Token.mk_ident lexeme region), state

    (* Attributes *)

    let mk_attr key value state buffer =
      let Core.{region; state; _} = state#sync buffer
      in Core.Token (Token.mk_attr ~key ?value region), state

    (* Data constructors and module names *)

    let mk_uident state buffer =
      let Core.{region; lexeme; state} = state#sync buffer
      in Core.Token (Token.mk_uident lexeme region), state

    (* Code injection *)

    let mk_lang start lang state buffer =
      let Core.{region; state; _} = state#sync buffer in
      let start    = region#start#shift_bytes (String.length start) in
      let stop     = region#stop in
      let lang_reg = Region.make ~start ~stop in
      let lang     = Region.{value=lang; region=lang_reg} in
      match Token.mk_lang lang region with
        Ok token -> Core.Token token, state
      | Error Token.Wrong_lang_syntax hint ->
          fail region (Wrong_lang_syntax hint)

    (* Symbols *)

    let mk_sym state buffer =
      let Core.{region; lexeme; state} = state#sync buffer in
      match Token.mk_sym lexeme region with
        Ok token -> Core.Token token, state
      | Error Token.Invalid_symbol string ->
          fail region (Invalid_symbol string)

    (* End-of-File *)

    let mk_eof state buffer =
      let Core.{region; state; _} = state#sync buffer
      in Core.Token (Token.mk_eof region), state

(* END HEADER *)

# 234 "src/passes/01-lexing/shared/Lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\242\255\243\255\247\255\031\000\248\255\066\000\090\000\
    \068\000\070\000\072\000\073\000\091\000\094\000\074\000\092\000\
    \078\000\082\000\095\000\017\000\107\000\112\000\124\000\197\000\
    \016\001\091\001\166\001\241\001\060\002\135\002\134\000\091\000\
    \028\000\252\255\210\002\220\002\243\002\025\003\048\003\103\003\
    \030\000\046\000\026\000\251\255\027\000\250\255\080\003\092\000\
    \128\003\028\000\244\255\159\003\217\003\047\004\161\004\245\255\
    \019\005\021\005\023\005\093\000\113\000\134\000\134\000\075\004\
    \251\255\071\000\252\255\253\255\254\255\000\000\158\003\028\005\
    \038\005\000\000\125\004\025\005\004\000\188\000\191\000\001\000\
    \254\255\255\255\002\000";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\007\000\255\255\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\006\000\006\000\001\000\
    \013\000\007\000\000\000\000\000\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\002\000\255\255\002\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\009\000\255\255\255\255\
    \255\255\255\255\010\000\255\255\255\255\255\255\007\000\255\255\
    \255\255\004\000\255\255\255\255\255\255\001\000\004\000\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\000\000\255\255\
    \255\255\255\255\000\000";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\000\000\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\000\000\
    \057\000\057\000\057\000\255\255\255\255\255\255\255\255\064\000\
    \000\000\255\255\000\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\075\000\255\255\255\255\255\255\080\000\
    \000\000\000\000\255\255";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\073\000\068\000\081\000\081\000\077\000\082\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \073\000\006\000\075\000\005\000\077\000\004\000\007\000\005\000\
    \005\000\005\000\011\000\013\000\005\000\012\000\015\000\010\000\
    \022\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\017\000\005\000\009\000\018\000\008\000\005\000\
    \024\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\020\000\005\000\005\000\014\000\025\000\
    \002\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\019\000\016\000\005\000\005\000\005\000\
    \005\000\005\000\061\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\060\000\005\000\005\000\002\000\059\000\005\000\
    \052\000\040\000\041\000\042\000\043\000\045\000\050\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\030\000\005\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\030\000\051\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\046\000\046\000\
    \046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
    \044\000\049\000\062\000\005\000\066\000\077\000\000\000\000\000\
    \078\000\000\000\005\000\000\000\000\000\000\000\000\000\034\000\
    \000\000\000\000\000\000\000\000\000\000\045\000\050\000\000\000\
    \000\000\000\000\000\000\034\000\077\000\032\000\033\000\078\000\
    \000\000\000\000\000\000\000\000\031\000\000\000\000\000\000\000\
    \000\000\032\000\033\000\000\000\000\000\078\000\078\000\000\000\
    \031\000\000\000\000\000\000\000\035\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\000\000\
    \003\000\081\000\000\000\000\000\000\000\000\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \000\000\000\000\000\000\000\000\023\000\000\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\000\000\000\000\000\000\000\000\029\000\
    \000\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\000\000\000\000\
    \000\000\000\000\028\000\000\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\000\000\000\000\000\000\000\000\026\000\000\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\000\000\000\000\000\000\000\000\
    \028\000\000\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\000\000\000\000\000\000\000\000\029\000\000\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\000\000\000\000\000\000\
    \000\000\034\000\000\000\000\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\000\000\000\000\000\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\000\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\039\000\039\000\039\000\039\000\039\000\039\000\000\000\
    \038\000\000\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
    \046\000\046\000\000\000\000\000\000\000\000\000\000\000\038\000\
    \000\000\039\000\039\000\039\000\039\000\039\000\039\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\000\000\000\000\000\000\000\000\000\000\000\000\072\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\000\000\048\000\
    \046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
    \046\000\046\000\000\000\000\000\000\000\000\000\072\000\000\000\
    \000\000\000\000\000\000\000\000\047\000\000\000\000\000\000\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\048\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\068\000\000\000\000\000\
    \069\000\000\000\000\000\000\000\000\000\053\000\000\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\000\000\000\000\000\000\000\000\070\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\000\000\000\000\000\000\000\000\053\000\000\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\056\000\066\000\000\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\056\000\000\000\000\000\000\000\000\000\054\000\065\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\054\000\
    \000\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\074\000\000\000\000\000\000\000\
    \000\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\000\000\000\000\055\000\000\000\
    \054\000\000\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\056\000\255\255\000\000\255\255\
    \000\000\255\255\000\000\255\255\000\000\073\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\072\000\
    \000\000\000\000\000\000\056\000\000\000\255\255\000\000\255\255\
    \000\000\255\255\000\000\076\000\073\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\072\000\000\000\
    \000\000\000\000\000\000\067\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \058\000\255\255\058\000\255\255\058\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\074\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\255\255\000\000\255\255\
    \000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\073\000\069\000\079\000\082\000\076\000\079\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \073\000\000\000\073\000\000\000\076\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\
    \007\000\008\000\009\000\009\000\009\000\010\000\011\000\014\000\
    \012\000\013\000\015\000\016\000\017\000\019\000\018\000\017\000\
    \020\000\032\000\040\000\041\000\042\000\044\000\049\000\007\000\
    \012\000\012\000\059\000\013\000\018\000\018\000\021\000\060\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\022\000\020\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \031\000\047\000\061\000\062\000\065\000\077\000\255\255\255\255\
    \078\000\255\255\016\000\255\255\255\255\255\255\255\255\021\000\
    \255\255\255\255\255\255\255\255\255\255\031\000\047\000\255\255\
    \255\255\255\255\255\255\022\000\077\000\021\000\021\000\078\000\
    \255\255\255\255\255\255\255\255\021\000\255\255\255\255\255\255\
    \255\255\022\000\022\000\255\255\255\255\077\000\077\000\255\255\
    \022\000\255\255\255\255\255\255\022\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\255\255\
    \000\000\079\000\255\255\255\255\255\255\255\255\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \255\255\255\255\255\255\255\255\023\000\255\255\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\255\255\255\255\255\255\255\255\024\000\
    \255\255\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\255\255\255\255\
    \255\255\255\255\025\000\255\255\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\255\255\255\255\255\255\255\255\026\000\255\255\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\255\255\255\255\255\255\255\255\
    \027\000\255\255\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\255\255\255\255\255\255\255\255\029\000\255\255\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\035\000\035\000\035\000\
    \035\000\035\000\035\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\255\255\255\255\255\255\
    \255\255\034\000\255\255\255\255\036\000\036\000\036\000\036\000\
    \036\000\036\000\255\255\255\255\255\255\035\000\035\000\035\000\
    \035\000\035\000\035\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\255\255\036\000\036\000\036\000\036\000\
    \036\000\036\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\038\000\038\000\038\000\038\000\038\000\038\000\255\255\
    \037\000\255\255\037\000\037\000\037\000\037\000\037\000\037\000\
    \046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
    \046\000\046\000\255\255\255\255\255\255\255\255\255\255\038\000\
    \255\255\038\000\038\000\038\000\038\000\038\000\038\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\255\255\255\255\255\255\255\255\255\255\255\255\070\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\255\255\046\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\255\255\255\255\255\255\255\255\070\000\255\255\
    \255\255\255\255\255\255\255\255\046\000\255\255\255\255\255\255\
    \039\000\039\000\039\000\039\000\039\000\039\000\070\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\048\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\053\000\063\000\255\255\255\255\
    \063\000\255\255\255\255\255\255\255\255\053\000\255\255\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\255\255\255\255\255\255\255\255\063\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\255\255\255\255\255\255\255\255\053\000\255\255\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\054\000\063\000\255\255\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\054\000\255\255\255\255\255\255\255\255\054\000\063\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\054\000\
    \255\255\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\074\000\255\255\255\255\255\255\
    \255\255\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\255\255\255\255\054\000\255\255\
    \054\000\255\255\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\056\000\056\000\255\255\057\000\
    \255\255\058\000\255\255\075\000\255\255\071\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\072\000\
    \255\255\255\255\255\255\056\000\255\255\056\000\255\255\057\000\
    \255\255\058\000\255\255\075\000\071\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\072\000\255\255\
    \255\255\255\255\255\255\063\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\056\000\
    \056\000\057\000\057\000\058\000\058\000\075\000\255\255\255\255\
    \255\255\255\255\255\255\071\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\056\000\255\255\057\000\255\255\058\000\
    \255\255\075\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\010\000\020\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\030\000\000\000\
    \000\000\000\000\040\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\014\000\050\000\000\000\
    \060\000\000\000\017\000\053\000\000\000\000\000\167\000\035\000\
    \168\000\024\001\026\001\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\029\001\131\000\
    \039\001\000\000\141\000\029\001\000\000\001\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_backtrk_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\046\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\058\000\058\000\069\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_default_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \040\000\040\000\040\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\040\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_trans_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\043\000\043\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \043\000\043\000\025\000\011\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \025\000\030\000\000\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\030\000\
    \030\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\022\000\000\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\000\000\000\000\000\000\000\000\000\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\000\000\000\000\000\000\043\000\022\000\000\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\000\000\000\000\000\000\000\000\011\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\011\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\000\
    \000\000\000\000\000\000\000\000\000\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\043\000\000\000\053\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_check_code =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\076\000\077\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \076\000\077\000\073\000\063\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\046\000\046\000\046\000\046\000\046\000\046\000\
    \046\000\046\000\046\000\046\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \054\000\056\000\056\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\054\000\
    \056\000\255\255\056\000\255\255\054\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\054\000\255\255\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\255\255\255\255\255\255\255\255\255\255\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\255\255\255\255\056\000\056\000\054\000\255\255\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\057\000\255\255\058\000\255\255\070\000\075\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \072\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\057\000\255\255\058\000\070\000\255\255\075\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\072\000\
    \255\255\255\255\255\255\255\255\255\255\070\000\070\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\057\000\057\000\058\000\058\000\
    \255\255\075\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \056\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \057\000\255\255\058\000\255\255\255\255\075\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_code =
   "\255\004\255\003\255\255\003\255\004\255\255\005\255\255\000\003\
    \255\000\004\001\005\255\006\255\255\008\255\007\255\255\007\255\
    \008\255\255\002\255\000\006\255\008\255\255\009\255\255\002\007\
    \001\008\000\006\255\008\009\009\255\255\004\255\000\005\001\006\
    \002\007\003\008\255\000\005\001\006\004\009\002\007\003\008\255\
    ";
}

let rec scan state lexbuf =
  lexbuf.Lexing.lex_mem <- Array.make 10 (-1); __ocaml_lex_scan_rec state lexbuf 0
and __ocaml_lex_scan_rec state lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 289 "src/passes/01-lexing/shared/Lexer.mll"
                ( mk_ident            state lexbuf )
# 862 "src/passes/01-lexing/shared/Lexer.ml"

  | 1 ->
# 290 "src/passes/01-lexing/shared/Lexer.mll"
                ( mk_uident           state lexbuf )
# 867 "src/passes/01-lexing/shared/Lexer.ml"

  | 2 ->
let
# 258 "src/passes/01-lexing/shared/Lexer.mll"
                                    bytes
# 873 "src/passes/01-lexing/shared/Lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 2) lexbuf.Lexing.lex_curr_pos in
# 291 "src/passes/01-lexing/shared/Lexer.mll"
                ( mk_bytes bytes      state lexbuf )
# 877 "src/passes/01-lexing/shared/Lexer.ml"

  | 3 ->
let
# 243 "src/passes/01-lexing/shared/Lexer.mll"
                            nat
# 883 "src/passes/01-lexing/shared/Lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_curr_pos + -1) in
# 292 "src/passes/01-lexing/shared/Lexer.mll"
                ( mk_nat   nat        state lexbuf )
# 887 "src/passes/01-lexing/shared/Lexer.ml"

  | 4 ->
let
# 243 "src/passes/01-lexing/shared/Lexer.mll"
                            nat
# 893 "src/passes/01-lexing/shared/Lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_curr_pos + -5) in
# 293 "src/passes/01-lexing/shared/Lexer.mll"
                ( mk_mutez nat        state lexbuf )
# 897 "src/passes/01-lexing/shared/Lexer.ml"

  | 5 ->
let
# 243 "src/passes/01-lexing/shared/Lexer.mll"
                            nat
# 903 "src/passes/01-lexing/shared/Lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_mem.(0)
and
# 244 "src/passes/01-lexing/shared/Lexer.mll"
                                 tez
# 908 "src/passes/01-lexing/shared/Lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_curr_pos in
# 294 "src/passes/01-lexing/shared/Lexer.mll"
                ( mk_tez   nat tez    state lexbuf )
# 912 "src/passes/01-lexing/shared/Lexer.ml"

  | 6 ->
# 295 "src/passes/01-lexing/shared/Lexer.mll"
                ( mk_int              state lexbuf )
# 917 "src/passes/01-lexing/shared/Lexer.ml"

  | 7 ->
# 296 "src/passes/01-lexing/shared/Lexer.mll"
                ( mk_sym              state lexbuf )
# 922 "src/passes/01-lexing/shared/Lexer.ml"

  | 8 ->
# 297 "src/passes/01-lexing/shared/Lexer.mll"
                ( mk_eof              state lexbuf )
# 927 "src/passes/01-lexing/shared/Lexer.ml"

  | 9 ->
let
# 260 "src/passes/01-lexing/shared/Lexer.mll"
                          start
# 933 "src/passes/01-lexing/shared/Lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 2)
and
# 260 "src/passes/01-lexing/shared/Lexer.mll"
                                          lang
# 938 "src/passes/01-lexing/shared/Lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 2) lexbuf.Lexing.lex_curr_pos in
# 298 "src/passes/01-lexing/shared/Lexer.mll"
                ( mk_lang  start lang state lexbuf )
# 942 "src/passes/01-lexing/shared/Lexer.ml"

  | 10 ->
let
# 300 "src/passes/01-lexing/shared/Lexer.mll"
                key
# 948 "src/passes/01-lexing/shared/Lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 2) lexbuf.Lexing.lex_mem.(0)
and
# 300 "src/passes/01-lexing/shared/Lexer.mll"
                                        value
# 953 "src/passes/01-lexing/shared/Lexer.ml"
= Lexing.sub_lexeme_opt lexbuf lexbuf.Lexing.lex_mem.(2) lexbuf.Lexing.lex_mem.(1) in
# 300 "src/passes/01-lexing/shared/Lexer.mll"
                                                     (
    let value =
      match value with
        None -> None
      | Some string -> Some (Attr.String string)
    in mk_attr key value state lexbuf )
# 962 "src/passes/01-lexing/shared/Lexer.ml"

  | 11 ->
let
# 244 "src/passes/01-lexing/shared/Lexer.mll"
                                 tez
# 968 "src/passes/01-lexing/shared/Lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(1) lexbuf.Lexing.lex_curr_pos
and
# 245 "src/passes/01-lexing/shared/Lexer.mll"
                             integral
# 973 "src/passes/01-lexing/shared/Lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_mem.(0)
and
# 245 "src/passes/01-lexing/shared/Lexer.mll"
                                                       fractional
# 978 "src/passes/01-lexing/shared/Lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_mem.(0) + 1) lexbuf.Lexing.lex_mem.(1) in
# 307 "src/passes/01-lexing/shared/Lexer.mll"
                    (
    mk_tez_dec integral fractional tez state lexbuf )
# 983 "src/passes/01-lexing/shared/Lexer.ml"

  | 12 ->
let
# 310 "src/passes/01-lexing/shared/Lexer.mll"
                lexeme
# 989 "src/passes/01-lexing/shared/Lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 310 "src/passes/01-lexing/shared/Lexer.mll"
                       (
    if String.equal lexeme @@ fst Token.verbatim_delimiters then
      let Core.{region; state; _} = state#sync lexbuf in
      let thread = Core.mk_thread region in
      let verb_end = snd Token.verbatim_delimiters
      in scan_verbatim verb_end thread state lexbuf |> mk_verbatim
    else
      let Core.{region; _} = state#sync lexbuf
      in fail region (Unexpected_character lexeme.[0]) )
# 1001 "src/passes/01-lexing/shared/Lexer.ml"

  | 13 ->
let
# 320 "src/passes/01-lexing/shared/Lexer.mll"
       c
# 1007 "src/passes/01-lexing/shared/Lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 320 "src/passes/01-lexing/shared/Lexer.mll"
         ( let Core.{region; _} = state#sync lexbuf
           in fail region (Unexpected_character c) )
# 1012 "src/passes/01-lexing/shared/Lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_scan_rec state lexbuf __ocaml_lex_state

and scan_verbatim verbatim_end thread state lexbuf =
  lexbuf.Lexing.lex_mem <- Array.make 10 (-1); __ocaml_lex_scan_verbatim_rec verbatim_end thread state lexbuf 63
and __ocaml_lex_scan_verbatim_rec verbatim_end thread state lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 327 "src/passes/01-lexing/shared/Lexer.mll"
                         line
# 1025 "src/passes/01-lexing/shared/Lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_mem.(1)
and
# 327 "src/passes/01-lexing/shared/Lexer.mll"
                                                     file
# 1030 "src/passes/01-lexing/shared/Lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(2) lexbuf.Lexing.lex_mem.(3)
and
# 328 "src/passes/01-lexing/shared/Lexer.mll"
                          flag
# 1035 "src/passes/01-lexing/shared/Lexer.ml"
= Lexing.sub_lexeme_char_opt lexbuf lexbuf.Lexing.lex_mem.(4) in
# 328 "src/passes/01-lexing/shared/Lexer.mll"
                                         (
    let Core.{state; region; _} = state#sync lexbuf
    in eol verbatim_end region line file flag thread state lexbuf
  )
# 1042 "src/passes/01-lexing/shared/Lexer.ml"

  | 1 ->
let
# 332 "src/passes/01-lexing/shared/Lexer.mll"
        nl
# 1048 "src/passes/01-lexing/shared/Lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 332 "src/passes/01-lexing/shared/Lexer.mll"
           ( let ()    = Lexing.new_line lexbuf
             and state = state#set_pos (state#pos#new_line nl) in
             scan_verbatim verbatim_end (thread#push_string nl) state lexbuf )
# 1054 "src/passes/01-lexing/shared/Lexer.ml"

  | 2 ->
# 335 "src/passes/01-lexing/shared/Lexer.mll"
           ( fail thread#opening (Unterminated_verbatim verbatim_end) )
# 1059 "src/passes/01-lexing/shared/Lexer.ml"

  | 3 ->
let
# 337 "src/passes/01-lexing/shared/Lexer.mll"
          lexeme
# 1065 "src/passes/01-lexing/shared/Lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 337 "src/passes/01-lexing/shared/Lexer.mll"
                  (
  if String.equal verbatim_end lexeme then
    Core.(thread, (state#sync lexbuf).state)
  else
    let Core.{state; _} = state#sync lexbuf in
    scan_verbatim verbatim_end (thread#push_string lexeme) state lexbuf )
# 1074 "src/passes/01-lexing/shared/Lexer.ml"

  | 4 ->
let
# 343 "src/passes/01-lexing/shared/Lexer.mll"
       c
# 1080 "src/passes/01-lexing/shared/Lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 343 "src/passes/01-lexing/shared/Lexer.mll"
           ( let Core.{state; _} = state#sync lexbuf in
             scan_verbatim verbatim_end (thread#push_char c) state lexbuf )
# 1085 "src/passes/01-lexing/shared/Lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_scan_verbatim_rec verbatim_end thread state lexbuf __ocaml_lex_state

and eol verbatim_end region_prefix line file flag thread state lexbuf =
   __ocaml_lex_eol_rec verbatim_end region_prefix line file flag thread state lexbuf 79
and __ocaml_lex_eol_rec verbatim_end region_prefix line file flag thread state lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 347 "src/passes/01-lexing/shared/Lexer.mll"
           ( let _, state =
               Core.linemarker region_prefix ~line ~file ?flag state lexbuf
             in scan_verbatim verbatim_end thread state lexbuf )
# 1099 "src/passes/01-lexing/shared/Lexer.ml"

  | 1 ->
# 350 "src/passes/01-lexing/shared/Lexer.mll"
           ( let Core.{region; _} = state#sync lexbuf
             in fail region Invalid_linemarker_argument )
# 1105 "src/passes/01-lexing/shared/Lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_eol_rec verbatim_end region_prefix line file flag thread state lexbuf __ocaml_lex_state

;;

# 355 "src/passes/01-lexing/shared/Lexer.mll"
 
(* START TRAILER *)

    (* Encoding a function call in exception-raising style (ERS) to
       error-passing style (EPS) *)

    let lift scanner lexbuf =
      try Stdlib.Ok (scanner lexbuf) with
        Error msg -> Stdlib.Error msg

    (* Function [scan] is the main exported function *)

    let client : token Core.client =
      let open Simple_utils.Utils in
      object
        method mk_string = mk_string
        method mk_eof    = lift <@ mk_eof
        method callback  = lift <@ scan
        method support_string_delimiter = support_string_delimiter
      end

    let scan = Core.mk_scan client

  end (* of functor [Make] in HEADER *)
(* END TRAILER *)

# 1139 "src/passes/01-lexing/shared/Lexer.ml"
